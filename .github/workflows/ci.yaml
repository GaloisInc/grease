name: CI

on:
  push:
    branches:
    - main
  pull_request:

env:
  # The CACHE_VERSION can be updated to force the use of a new cache if the
  # current cache contents become corrupted/invalid. This can sometimes happen
  # when (for example) the OS version is changed but older .so files are
  # cached, which can have various effects (e.g. cabal complains it can't find
  # a valid version of the "happy" tool).
  CACHE_VERSION: 1

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        ghc: ["9.4.8", "9.6.6", "9.8.4"]
        cabal: ["3.10.3.0"]
        os: [ubuntu-22.04]
      # complete all jobs
      fail-fast: false
    name: GREASE - GHC v${{ matrix.ghc }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Setup Haskell
      uses: haskell-actions/setup@v2
      id: setup-haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}

    - name: Restore cabal store cache
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ steps.setup-haskell.outputs.cabal-store }}
          dist-newstyle
        key: ${{ env.CACHE_VERSION }}-cabal-${{ matrix.os }}-${{ matrix.ghc }}-${{ github.sha }}
        restore-keys: |
          ${{ env.CACHE_VERSION }}-cabal-${{ matrix.os }}-${{ matrix.ghc }}-

    - name: Install solvers
      shell: bash
      run: .github/ci.sh install_system_deps
      env:
        BIN_ZIP_FILE: ${{ matrix.os }}-${{ runner.arch }}-bin.zip
        # The solver package snapshot date. If you update this, make sure to also
        # update it in the Dockerfile.
        SOLVER_PKG_VERSION: "snapshot-20241119"

    - name: Check .cabal files
      shell: bash
      run: |
        (cd grease && cabal check)
        (cd doc/diagrams && cabal check)
        (cd elf-edit-core-dump && cabal check)

    - name: Configure build
      shell: bash
      run: cabal configure --enable-tests

    - name: Build
      shell: bash
      run: cabal build pkg:grease pkg:grease-diagrams

    - name: Test grease
      shell: bash
      run: cabal test pkg:grease

    - name: Test grease-diagrams
      shell: bash
      # TODO: Make sure there's no diff
      run: cabal run exe:grease-diagrams -- --output doc/mem.svg --width 400 --height 400

    - name: Haddock
      shell: bash
      # Build the Haddocks to ensure that they are well formed. Somewhat
      # counterintuitively, we run this with the --disable-documentation flag.
      # This does not mean "do not build the Haddocks", but rather, "build the
      # Haddocks for the top-level library, but do not build dependencies with
      # Haddocks". The upshot is that we do not change the build configuration
      # for any dependencies, which means that we don't have to rebuild them.
      # The downside is that the rendered Haddocks won't contain any links to
      # identifiers from library dependencies. Since we are only building
      # Haddocks to ensure well-formedness, we consider this an acceptable
      # tradeoff.
      run: cabal haddock --disable-documentation pkg:grease pkg:elf-edit-core-dump

    - name: Save cache store cache
      uses: actions/cache/save@v4
      if: always()
      with:
        path: |
          ${{ steps.setup-haskell.outputs.cabal-store }}
          dist-newstyle
        key: ${{ env.CACHE_VERSION }}-cabal-${{ matrix.os }}-${{ matrix.ghc }}-${{ github.sha }}
          ${{ env.CACHE_VERSION }}-cabal-${{ matrix.os }}-${{ matrix.ghc }}-
