name: CI

on:
  push:
    branches:
    - main
  pull_request:

env:
  # The CACHE_VERSION can be updated to force the use of a new cache if the
  # current cache contents become corrupted/invalid. This can sometimes happen
  # when (for example) the OS version is changed but older .so files are
  # cached, which can have various effects (e.g. cabal complains it can't find
  # a valid version of the "happy" tool).
  CACHE_VERSION: 1


jobs:
  build:
    name: GREASE - GHC v${{ matrix.ghc }} - ${{ matrix.cache-key-prefix }}
    runs-on: ${{ matrix.os }}
    strategy:
      # complete all jobs
      fail-fast: false
      matrix:
        cabal: ["3.14.1.1"]
        cache-key-prefix: [""]  # see `include` below
        ghc: ["9.4.8", "9.6.6", "9.8.4"]
        haddock: [true]  # see `include` below
        os: [ubuntu-22.04]
        pre-hook: [""]  # see `include` below
        include:
        # Include a single build (with latest Linux OS and latest GHC version)
        # using `cabal-force-upper-bounds` to verify that we actually build
        # against the upper bounds in the Cabal `build-depends`.
        - cabal: "3.14.1.1"
          cache-key-prefix: upper-bounds
          ghc: 9.8.4
          haddock: false
          os: ubuntu-22.04
          pre-hook: |
            curl \
              --fail \
              --location \
              --proto '=https' \
              --show-error \
              --silent \
              --tlsv1.2 \
              https://github.com/nomeata/cabal-force-upper-bound/releases/download/0.1/cabal-force-upper-bound.linux.gz | \
              gunzip > \
              /usr/local/bin/cabal-force-upper-bound
            chmod +x /usr/local/bin/cabal-force-upper-bound
            for f in \
                ./doc/diagrams/grease-diagrams.cabal \
                ./elf-edit-core-dump/elf-edit-core-dump.cabal \
                ./grease*/grease*.cabal; do
              cabal-force-upper-bound --cabal-project "${f}" >> cabal.project
            done
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Run pre-hook
      shell: bash
      run: ${{ matrix.pre-hook }}

    - name: Setup Haskell
      uses: haskell-actions/setup@v2
      id: setup-haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}

    - name: Restore cabal store cache
      uses: actions/cache/restore@v4
      id: cache
      with:
        path: |
          ${{ steps.setup-haskell.outputs.cabal-store }}
          dist-newstyle
        key: ${{ matrix.cache-key-prefix }}-${{ env.CACHE_VERSION }}-cabal-${{ matrix.os }}-${{ matrix.ghc }}-${{ github.sha }}
        restore-keys: |
          ${{ matrix.cache-key-prefix }}-${{ env.CACHE_VERSION }}-cabal-${{ matrix.os }}-${{ matrix.ghc }}-

    - name: Configure build
      shell: bash
      run: cabal configure --enable-tests --semaphore

    - name: Build grease-cli
      shell: bash
      run: cabal build pkg:grease-cli pkg:grease-diagrams

    - name: Install solvers
      shell: bash
      run: .github/ci.sh install_system_deps
      env:
        BIN_ZIP_FILE: ${{ matrix.os }}-${{ runner.arch }}-bin.zip
        # The solver package snapshot date. If you update this, make sure to
        # also update it in the Dockerfile. Also make sure to update the version
        # of Yices mentioned in the installation instructions.
        SOLVER_PKG_VERSION: "snapshot-20241119"

    - name: Test grease-cli
      shell: bash
      run: cabal test pkg:grease-cli

    - name: Test grease-diagrams
      shell: bash
      # TODO: Make sure there's no diff
      run: cabal run exe:grease-diagrams -- --output doc/mem.svg --width 400 --height 400

    - name: Setup Ghidra
      uses: ./.github/actions/ghidra-install
      
    - name: Test Ghidra plugin
      shell: bash
      run: cd ghidra-plugin && ./gradlew installExtension && ./gradlew test

    - name: Haddock
      if: ${{ matrix.haddock }}
      shell: bash
      # Build the Haddocks to ensure that they are well formed. Somewhat
      # counterintuitively, we run this with the --disable-documentation flag.
      # This does not mean "do not build the Haddocks", but rather, "build the
      # Haddocks for the top-level library, but do not build dependencies with
      # Haddocks". The upshot is that we do not change the build configuration
      # for any dependencies, which means that we don't have to rebuild them.
      # The downside is that the rendered Haddocks won't contain any links to
      # identifiers from library dependencies. Since we are only building
      # Haddocks to ensure well-formedness, we consider this an acceptable
      # tradeoff.
      run: cabal haddock --disable-documentation pkg:grease pkg:grease-cli pkg:elf-edit-core-dump

    - name: Check .cabal files
      shell: bash
      run: |
        (cd grease && cabal check)
        (cd grease-aarch32 && cabal check)
        (cd grease-ppc && cabal check)
        (cd grease-x86 && cabal check)
        (cd grease-cli && cabal check)
        (cd doc/diagrams && cabal check)
        (cd elf-edit-core-dump && cabal check)

    - name: Save cache store cache
      uses: actions/cache/save@v4
      if: always()
      with:
        path: |
          ${{ steps.setup-haskell.outputs.cabal-store }}
          dist-newstyle
        key: ${{ steps.cache.outputs.cache-primary-key }}
